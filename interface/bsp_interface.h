/**
 * @file        bsp_interface.h
 * @author      sephony
 * @date        2024-09-01
 * @version     1.0.0
 * @brief       Bsp Library for abstract interface
 * @details     Include common communication protocols, some system functions
 * @note        URL: https://github.com/sephony/MS5611
 *
 * @attention
 *	MIT License
 *
 *	Copyright (c) 2024 sephony
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy
 *	of this software and associated documentation files (the "Software"), to deal
 *	in the Software without restriction, including without limitation the rights
 *	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *	copies of the Software, and to permit persons to whom the Software is
 *	furnished to do so, subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *	SOFTWARE.
 * -----------------------------------------------------------------------------
 */
#ifndef __BSP_INTERFACE_H
#define __BSP_INTERFACE_H

/* Standard libarary */
#include "stdbool.h"

/* Peripheral files generated by HAL libarary */
#ifdef USE_HAL_DRIVER
#include "i2c.h"
#include "spi.h"
#endif

/* User Inlcude */
#if __has_include("pin.h")
#include "pin.h"
#endif
#if __has_include("delay.h")
#include "delay.h"
#endif

/* IIC driver interface */
typedef struct __iic_driver_interface_t {
    // int8_t (*init)(void);
    // int8_t (*deInit)(void);
    void (*writeByte)(uint16_t address, uint8_t command);
    uint8_t (*readByte)(uint16_t address);
    void (*readBytes)(uint16_t address, uint8_t* rxData, uint16_t size);
} iic_driver_interface_t;

/* SPI driver interface */
typedef struct __spi_driver_interface_t {
    // int8_t (*init)(void);
    // int8_t (*deInit)(void);
    uint8_t (*readWriteByte)(uint8_t txData);
    void (*setCS)(bool state);
} spi_driver_interface_t;

/* Delay function interface */
typedef struct __delay_function_t {
    // uint8_t (*init)(void);
    void (*us)(uint32_t us);
    void (*ms)(uint32_t ms);
} delay_function_t;

/* Driver function interface */
typedef struct __driver_funcion_t {
    iic_driver_interface_t iic;
    spi_driver_interface_t spi;
} driver_funcion_t;

/* System function interface */
typedef struct __system_function_t {
    delay_function_t delay;
} system_function_t;

/* Interface */
typedef struct __interface_t {
    driver_funcion_t driver;
    system_function_t sys;
} interface_t;

void bsp_IIC_WriteByte(uint16_t address, uint8_t command);
uint8_t bsp_IIC_ReadByte(uint16_t address);
void bsp_IIC_ReadBytes(uint16_t address, uint8_t* rxData, uint16_t size);
uint8_t bsp_SPI_ReadWriteByte(uint8_t txData);
void bsp_SPI_SetCS(bool state);

void bsp_delay_init(void);
void bsp_delay_ms(uint32_t nms);
void bsp_delay_us(uint32_t nus);

extern iic_driver_interface_t iic_driver;
extern spi_driver_interface_t spi_driver;
extern delay_function_t delay_func;

extern driver_funcion_t driver_func;
extern system_function_t sys_func;

extern interface_t bsp_interface;

#endif /* __BSP_MS5611_H */
